trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self
- task: UsePythonVersion@0
  displayName: 'Use Python 3.8'
  inputs:
    versionSpec: '3.8'

- script: |
    pip3 install pre-commit
    pip3 install checkov
  displayName: 'Install pre-commit and checkov'

- script: |
    if ! command -v tflint &> /dev/null
    then
      wget https://github.com/terraform-linters/tflint/releases/download/v0.30.0/tflint_linux_amd64.zip
      unzip tflint_linux_amd64.zip
      sudo mv tflint /usr/local/bin/
    fi
    tflint --version
  displayName: 'Install TFLint'

- script: |
    if ! command -v tfsec &> /dev/null
    then
      wget https://github.com/tfsec/tfsec/releases/download/v0.58.3/tfsec-linux-amd64
      chmod +x tfsec-linux-amd64
      sudo mv tfsec-linux-amd64 /usr/local/bin/tfsec
    fi
    tfsec --version
  displayName: 'Install tfsec'

- script: |
    if ! command -v terraform-docs &> /dev/null
    then
      wget https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-linux-amd64.tar.gz
      tar -xzvf terraform-docs-v0.16.0-linux-amd64.tar.gz
      sudo mv terraform-docs /usr/local/bin/
    fi
    terraform-docs --version
    terraform-docs markdown . > terraform_docs.md
  displayName: 'Terraform-docs'

- task: Bash@3
  displayName: 'pre-commit run'
  inputs:
    targetType: 'inline'
    script: pre-commit run --all-files
  condition: succeededOrFailed()

- script: |
    wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
    sudo apt update && sudo apt install terraform
    terraform --version
    terraform fmt -check -diff
  displayName: 'Terraform format'

- task: AzureCLI@2
  displayName: 'Terraform init, validate & plan'
  inputs:
    azureSubscription: 'SAP-NEOM-HOTELS'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
       cd test
       terraform init
       terraform validate
       terraform plan --out tfplan.json
       pwd
       ls
       
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: '**'
    TargetFolder: '$(Agent.TempDirectory)'     

- task: AzurePowerShell@5
  displayName: 'checkov scan'
  inputs:
    azureSubscription: 'SAP-NEOM-HOTELS'
    ScriptType: 'InlineScript'
    Inline: | 
       checkov --version
       checkov -d test -o junitxml > $(System.DefaultWorkingDirectory)/checkovmodulereport.xml
    azurePowerShellVersion: 'LatestVersion'

- task: AzurePowerShell@5
  displayName: 'checkov tfplan scan'
  inputs:
    azureSubscription: 'SAP-NEOM-HOTELS'
    ScriptType: 'InlineScript'
    Inline: | 
       ls '$(System.DefaultWorkingDirectory)/test'
       checkov -f $(System.DefaultWorkingDirectory)/test/tfplan.json -o junitxml > $(System.DefaultWorkingDirectory)/checkovtfplanreport.xml
    azurePowerShellVersion: 'LatestVersion'
    
- task: PublishTestResults@2
  inputs:
    testRunTitle: Checkov Module Results
    failTaskOnFailedTests: false
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/*checkovmodulereport.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    publishRunAttachments: true
  displayName: "Publish > Checkov module scan results"

- task: PublishTestResults@2
  inputs:
    testRunTitle: Checkov tfplan Results
    failTaskOnFailedTests: false
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/*checkovtfplanreport.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    publishRunAttachments: true
  displayName: "Publish > Checkov tfplan scan results"

- task: AzureCLI@2
  displayName: 'Terraform apply'
  inputs:
    azureSubscription: 'SAP-NEOM-HOTELS'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
       cd test
       ls
       terraform apply -auto-approve tfplan.json

- task: AzureCLI@2
  displayName: 'Terraform destroy'
  inputs:
    azureSubscription: 'SAP-NEOM-HOTELS'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
       cd test
       ls
       terraform destroy -auto-approve 
 
- script: |
      #!/bin/bash
      
      # Navigate to the working directory
      cd $(System.DefaultWorkingDirectory)
      
      # Set the Personal Access Token
      PAT=$(PAT)
      
      # Configure Git to use the Personal Access Token for authentication
      git config --local url."https://Mukesh-PS:$PAT@github.com".insteadOf https://github.com  
      
      # Ensure /usr/bin is in the PATH
      export PATH=$PATH:/usr/bin
      
      # Source the bash configuration file
      source ~/.bashrc
      
      # Get the last tag in the GitHub repository
      lastTag=$(git describe --tags --abbrev=0 2>/dev/null)
      
      # Default to v0.0.0 if no tags are found or if the tag is invalid
      if [[ ! $lastTag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          lastTag="v0.0.0"
      fi
      
      # Get the commit hash of the last tagged commit
      lastTagCommit=$(git rev-list -n 1 $lastTag 2>/dev/null)
      
      # Check if lastTagCommit is set
      if [[ -z "$lastTagCommit" ]]; then
          lastTagCommit=$(git rev-list --max-parents=0 HEAD)  # Get the initial commit if no tags are found
      fi
      
      # Check if there are new commits since the last tagged commit
      newCommits=$(git rev-list HEAD ^$lastTagCommit --count 2>/dev/null)
      
      if [[ "$newCommits" -eq 0 ]]; then
          echo "No new commits since the last tag. Skipping tag creation."
      else
          # Extract major, minor, and patch version parts
          majorVersion=$(echo $lastTag | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1/')
          minorVersion=$(echo $lastTag | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\2/')
          patchVersion=$(echo $lastTag | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\3/')
      
          # Increment the patch version
          patchVersion=$((patchVersion + 1))
      
          # Check if patch version exceeds 99
          if [ "$patchVersion" -gt 99 ]; then
              patchVersion=0
      
              # Increment the minor version
              minorVersion=$((minorVersion + 1))
      
              # Check if minor version exceeds 99
              if [ "$minorVersion" -gt 99 ]; then
                  minorVersion=0
      
                  # Increment the major version
                  majorVersion=$((majorVersion + 1))
              fi
          fi
      
          # Form the new tag
          newTag="v${majorVersion}.${minorVersion}.${patchVersion}"
      
          # Check if the new tag already exists
          if git rev-parse "$newTag" >/dev/null 2>&1; then
              echo "The tag $newTag already exists. Skipping tag creation."
          else
              # Tag the current build with the new tag
              git tag $newTag
      
              # Push the tag to the GitHub repository
              git push origin --tags
          fi
      fi
  displayName: 'Git Tagging'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')